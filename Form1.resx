<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button3.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        1//Z
</value>
  </data>
</root>